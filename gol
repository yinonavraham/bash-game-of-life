#!/usr/bin/env bash

board_rows=14
board_cols=39

# http://www.fileformat.info/info/unicode/block/block_elements/images.htm
BLOCK_FULL='\xE2\x96\x88'
BLOCK_LIGHT_SHADE='\xE2\x96\x91'

function cell_alive() {
  local row="${1}"
  local col="${2}"
  local cell_name
  cell_name="$(cell_var_name "${row}" "${col}")"
  [[ "${!cell_name}" == true ]]
}

function set_cell_alive() {
  local row="${1}"
  local col="${2}"
  local alive="${3}"
  local cell_name
  cell_name="$(cell_var_name "${row}" "${col}")"
  export "${cell_name}=${alive}"
}

function cell_var_name() {
  local row="${1}"
  local col="${2}"
  echo "board_${row}_${col}"
}

function cell_should_live() {
  local row="${1}"
  local col="${2}"
  local neighbors=0
  local r c
  for ((r = row-1; r <= row+1; r++)); do
  	[[ "${r}" -ge 0 ]] && [[ "${r}" -lt "${board_rows}" ]] || continue
    for ((c = col-1; c <= col+1; c++)); do
  	  [[ "${c}" -ge 0 ]] && [[ "${c}" -lt "${board_cols}" ]] || continue
  	  if [[ "${r}" == "${row}" ]] && [[ "${c}" == "${col}" ]]; then continue; fi
  	  if cell_alive "${r}" "${c}"; then
  	  	neighbors=$((neighbors + 1))
  	  fi
  	done
  done
  if cell_alive "${row}" "${col}"; then
    [[ "${neighbors}" -eq 3 ]] || [[ "${neighbors}" -eq 2 ]]
  else
  	[[ "${neighbors}" -eq 3 ]]
  fi 
}

function update_board_next_lifecycle() {
  local updates_file="${1}"
  local row col cell_name ctrlFile threads=0 offset length
  ctrlFile="$(mktemp)"
  for ((row = 0; row < board_rows; row++)); do
  	offset=0
  	while [[ "$((board_cols - offset))" -gt 0 ]]; do
  	  length=10 # Each thread will handle an array of size 10
  	  if [[ "$((offset + length))" -gt "${board_cols}" ]]; then
  	    length="$((board_cols - offset))"
  	  fi
      update_board_row_next_lifecycle "${row}" "${offset}" "${length}" "${updates_file}" "${ctrlFile}" &
      threads=$((threads + 1))
      offset=$((offset + length))
    done
  done
  waitForThreads "${ctrlFile}" "${threads}"
  local state
  while read line; do
    row="$(echo "$line" | cut  -d' ' -f1)"
    col="$(echo "$line" | cut  -d' ' -f2)"
    state="$(echo "$line" | cut  -d' ' -f3)"
    cell_name="$(cell_var_name "${row}" "${col}")"
    export "${cell_name}=${state}"
  done < "${updates_file}"
}

function update_board_row_next_lifecycle() {
  local row="${1}"
  local colStart="${2}"
  local colLength="${3}"
  local updatedCellsFile="${4}"
  local ctrlFile="${5}"
  local col cell_name
  for ((col = colStart; col < colStart+colLength; col++)); do
  	cell_name="$(cell_var_name "${row}" "${col}")"
    if cell_should_live "${row}" "${col}"; then
      if ! cell_alive "${row}" "${col}"; then
        echo "${row} ${col} true" >> "${updatedCellsFile}"
      fi
    elif cell_alive "${row}" "${col}"; then
      echo "${row} ${col} false" >> "${updatedCellsFile}"
    fi
  done
  echo "${row}" >> "${ctrlFile}"
}

function waitForThreads() {
  local ctrlFile="${1}"
  local threadCount="${2}"
  while ! controlFileComplete "${ctrlFile}" "${threadCount}"; do
  	sleep 0.1
  done
  rm -rf "${ctrlFile}"
}

function controlFileComplete() {
  local ctrlFile="${1}"
  local expectedCount="${2}"
  if [[ ! -f "${ctrlFile}" ]]; then
  	return 1
  fi
  local count
  count="$(wc -l "${ctrlFile}" | sed 's/^ *//g' | sed 's/  *.*//g')"
  [[ "${count}" -ge "${expectedCount}" ]]
}

function run_life() {
  local updates_file
  while true; do
    updates_file="$(mktemp)"
  	#sleep 0.1
  	update_board_next_lifecycle "${updates_file}"
  	print_board_updates "${updates_file}"
  	rm -rf "${updates_file}"
  done
}

function init_board() {
  local r c
  for ((r = 0; r < board_rows; r++)); do
    for ((c = 0; c < board_cols; c++)); do
  	  set_cell_alive "${r}" "${c}" false
  	done
  done
}

function print_board() {
  clear
  local r c block cell_name
  for ((r = 0; r < board_rows; r++)); do
    for ((c = 0; c < board_cols; c++)); do
      print_cell "${r}" "${c}"
  	done
  	printf "\n"
  done
}

function print_cell() {
  local row="${1}"
  local col="${2}"
  block="${BLOCK_LIGHT_SHADE}"
  if cell_alive "${row}" "${col}"; then
    block="${BLOCK_FULL}"
  fi
 printf "${block}${block}"
}

function print_board_updates() {
  local updates_file="${1}"
  while read line; do
    row="$(echo "$line" | cut  -d' ' -f1)"
    col="$(echo "$line" | cut  -d' ' -f2)"
    tput cup "${row}" "$((col*2))"
    print_cell  "${row}" "${col}"
  done < "${updates_file}"
  tput cup "$(tput lines)" "0"
}

function create_initial_glider() {
  set_cell_alive 0 2 true
  set_cell_alive 1 0 true
  set_cell_alive 1 2 true
  set_cell_alive 2 1 true
  set_cell_alive 2 2 true
}

function create_initial_glidergun() {
  set_cell_alive 5 1 true
  set_cell_alive 5 2 true
  set_cell_alive 6 1 true
  set_cell_alive 6 2 true

  set_cell_alive 5 11 true
  set_cell_alive 6 11 true
  set_cell_alive 7 11 true
  set_cell_alive 4 12 true
  set_cell_alive 8 12 true
  set_cell_alive 3 13 true
  set_cell_alive 9 13 true
  set_cell_alive 3 14 true
  set_cell_alive 9 14 true
  set_cell_alive 6 15 true
  set_cell_alive 4 16 true
  set_cell_alive 8 16 true
  set_cell_alive 5 17 true
  set_cell_alive 6 17 true
  set_cell_alive 7 17 true
  set_cell_alive 6 18 true

  set_cell_alive 3 21 true
  set_cell_alive 4 21 true
  set_cell_alive 5 21 true
  set_cell_alive 3 22 true
  set_cell_alive 4 22 true
  set_cell_alive 5 22 true
  set_cell_alive 2 23 true
  set_cell_alive 6 23 true
  set_cell_alive 1 25 true
  set_cell_alive 2 25 true
  set_cell_alive 6 25 true
  set_cell_alive 7 25 true

  set_cell_alive 3 35 true
  set_cell_alive 4 35 true
  set_cell_alive 3 36 true
  set_cell_alive 4 36 true
}

trap 'clear' EXIT
init_board
create_initial_glidergun
print_board
run_life